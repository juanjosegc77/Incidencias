import Crypt.Crypto;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.table.DefaultTableModel;

/**
 * @author Ing. Juan José Guzmán Cruz
 */

public class ActualizarAlfabetico extends javax.swing.JDialog {

    HelperDB helper;
    String id;
    int op;
    
    public ActualizarAlfabetico(java.awt.Frame parent, boolean modal, int op) {
        super(parent, modal);
        initComponents();
        
        this.op = op;
        configurarBotonGuardar();
        cargarCombos();
        limpiarDialogDatosAlfabetico();
        //setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelPlaza = new javax.swing.JLabel();
        jTextFieldPlaza = new javax.swing.JTextField();
        jLabelEntrada = new javax.swing.JLabel();
        jLabelTurno = new javax.swing.JLabel();
        jLabelServicio = new javax.swing.JLabel();
        jLabelSalida = new javax.swing.JLabel();
        jLabelTarjeta = new javax.swing.JLabel();
        jTextFieldTarjeta = new javax.swing.JTextField();
        jLabelNombre = new javax.swing.JLabel();
        jTextFieldNombre = new javax.swing.JTextField();
        jLabelNumEmp = new javax.swing.JLabel();
        jTextFieldNumEmp = new javax.swing.JTextField();
        jLabelRFC = new javax.swing.JLabel();
        jTextFieldRFC = new javax.swing.JTextField();
        jLabelNombramiento = new javax.swing.JLabel();
        jLabelAdsc = new javax.swing.JLabel();
        jLabelPuesto = new javax.swing.JLabel();
        jLabelObservaciones = new javax.swing.JLabel();
        jLabelFechaIngreso = new javax.swing.JLabel();
        jButtonGuardar = new javax.swing.JButton();
        jButtonCerrar = new javax.swing.JButton();
        jComboBoxAdsc = new javax.swing.JComboBox();
        jComboBoxPuesto = new javax.swing.JComboBox();
        jComboBoxNombramiento = new javax.swing.JComboBox();
        jComboBoxServicio = new javax.swing.JComboBox();
        jComboBoxTurno = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaObservaciones = new javax.swing.JTextArea();
        jButtonAddAdsc = new javax.swing.JButton();
        jButtonAddNombramiento = new javax.swing.JButton();
        jButtonAddPuesto = new javax.swing.JButton();
        jButtonAddServicio = new javax.swing.JButton();
        jButtonAddTurno = new javax.swing.JButton();
        jSpinnerEntrada = new javax.swing.JSpinner();
        jSpinnerSalida = new javax.swing.JSpinner();
        jSpinnerFechaIng = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setLocation(new java.awt.Point(50, 50));
        setModal(true);
        setResizable(false);

        jLabelPlaza.setFont(new java.awt.Font("DejaVu Sans", 0, 14)); // NOI18N
        jLabelPlaza.setText("Plaza:");

        jTextFieldPlaza.setFont(new java.awt.Font("DejaVu Sans", 0, 14)); // NOI18N

        jLabelEntrada.setFont(new java.awt.Font("DejaVu Sans", 0, 14)); // NOI18N
        jLabelEntrada.setText("Entrada:");

        jLabelTurno.setFont(new java.awt.Font("DejaVu Sans", 0, 14)); // NOI18N
        jLabelTurno.setText("Turno:");

        jLabelServicio.setFont(new java.awt.Font("DejaVu Sans", 0, 14)); // NOI18N
        jLabelServicio.setText("Servicio:");

        jLabelSalida.setFont(new java.awt.Font("DejaVu Sans", 0, 14)); // NOI18N
        jLabelSalida.setText("Salida:");

        jLabelTarjeta.setFont(new java.awt.Font("DejaVu Sans", 0, 14)); // NOI18N
        jLabelTarjeta.setText("Tarjeta:");

        jTextFieldTarjeta.setFont(new java.awt.Font("DejaVu Sans", 0, 14)); // NOI18N

        jLabelNombre.setFont(new java.awt.Font("DejaVu Sans", 0, 14)); // NOI18N
        jLabelNombre.setText("Nombre:");

        jTextFieldNombre.setFont(new java.awt.Font("DejaVu Sans", 0, 14)); // NOI18N

        jLabelNumEmp.setFont(new java.awt.Font("DejaVu Sans", 0, 14)); // NOI18N
        jLabelNumEmp.setText("NumEmp:");

        jTextFieldNumEmp.setFont(new java.awt.Font("DejaVu Sans", 0, 14)); // NOI18N

        jLabelRFC.setFont(new java.awt.Font("DejaVu Sans", 0, 14)); // NOI18N
        jLabelRFC.setText("RFC:");

        jTextFieldRFC.setFont(new java.awt.Font("DejaVu Sans", 0, 14)); // NOI18N

        jLabelNombramiento.setFont(new java.awt.Font("DejaVu Sans", 0, 14)); // NOI18N
        jLabelNombramiento.setText("Nombramiento:");

        jLabelAdsc.setFont(new java.awt.Font("DejaVu Sans", 0, 14)); // NOI18N
        jLabelAdsc.setText("Adsc:");

        jLabelPuesto.setFont(new java.awt.Font("DejaVu Sans", 0, 14)); // NOI18N
        jLabelPuesto.setText("Puesto:");

        jLabelObservaciones.setFont(new java.awt.Font("DejaVu Sans", 0, 14)); // NOI18N
        jLabelObservaciones.setText("Observaciones:");

        jLabelFechaIngreso.setFont(new java.awt.Font("DejaVu Sans", 0, 14)); // NOI18N
        jLabelFechaIngreso.setText("Fecha de Ingreso:");

        jButtonGuardar.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jButtonGuardar.setText("Actualizar");
        jButtonGuardar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jButtonGuardarMouseReleased(evt);
            }
        });

        jButtonCerrar.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jButtonCerrar.setText("Cerrar");
        jButtonCerrar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jButtonCerrarMouseReleased(evt);
            }
        });

        jComboBoxAdsc.setFont(new java.awt.Font("DejaVu Sans", 0, 14)); // NOI18N

        jComboBoxPuesto.setFont(new java.awt.Font("DejaVu Sans", 0, 14)); // NOI18N

        jComboBoxNombramiento.setFont(new java.awt.Font("DejaVu Sans", 0, 14)); // NOI18N

        jComboBoxServicio.setFont(new java.awt.Font("DejaVu Sans", 0, 14)); // NOI18N

        jComboBoxTurno.setFont(new java.awt.Font("DejaVu Sans", 0, 14)); // NOI18N

        jTextAreaObservaciones.setColumns(20);
        jTextAreaObservaciones.setFont(new java.awt.Font("DejaVu Sans", 0, 14)); // NOI18N
        jTextAreaObservaciones.setRows(5);
        jTextAreaObservaciones.setTabSize(4);
        jTextAreaObservaciones.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jScrollPane2.setViewportView(jTextAreaObservaciones);

        jButtonAddAdsc.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        jButtonAddAdsc.setFocusable(false);
        jButtonAddAdsc.setLabel("...");
        jButtonAddAdsc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jButtonAddAdscMouseReleased(evt);
            }
        });

        jButtonAddNombramiento.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        jButtonAddNombramiento.setFocusable(false);
        jButtonAddNombramiento.setLabel("...");
        jButtonAddNombramiento.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jButtonAddNombramientoMouseReleased(evt);
            }
        });

        jButtonAddPuesto.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        jButtonAddPuesto.setFocusable(false);
        jButtonAddPuesto.setLabel("...");
        jButtonAddPuesto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jButtonAddPuestoMouseReleased(evt);
            }
        });

        jButtonAddServicio.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        jButtonAddServicio.setFocusable(false);
        jButtonAddServicio.setLabel("...");
        jButtonAddServicio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jButtonAddServicioMouseReleased(evt);
            }
        });

        jButtonAddTurno.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        jButtonAddTurno.setFocusable(false);
        jButtonAddTurno.setLabel("...");
        jButtonAddTurno.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jButtonAddTurnoMouseReleased(evt);
            }
        });

        jSpinnerEntrada.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, null, java.util.Calendar.HOUR_OF_DAY));

        jSpinnerSalida.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, null, java.util.Calendar.HOUR_OF_DAY));

        jSpinnerFechaIng.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, null, java.util.Calendar.HOUR_OF_DAY));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelFechaIngreso)
                        .addGap(18, 18, 18)
                        .addComponent(jSpinnerFechaIng, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButtonGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(278, 278, 278)
                                .addComponent(jButtonCerrar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelEntrada)
                                .addGap(18, 18, 18)
                                .addComponent(jSpinnerEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(108, 108, 108)
                                .addComponent(jLabelSalida)
                                .addGap(20, 20, 20)
                                .addComponent(jSpinnerSalida, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelTurno)
                                .addGap(18, 18, 18)
                                .addComponent(jComboBoxTurno, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonAddTurno, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelRFC)
                                .addGap(18, 18, 18)
                                .addComponent(jTextFieldRFC, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelPlaza)
                                .addGap(18, 18, 18)
                                .addComponent(jTextFieldPlaza, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelNumEmp)
                                .addGap(18, 18, 18)
                                .addComponent(jTextFieldNumEmp, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabelTarjeta)
                                        .addGap(18, 18, 18)
                                        .addComponent(jTextFieldTarjeta))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabelAdsc)
                                        .addGap(18, 18, 18)
                                        .addComponent(jComboBoxAdsc, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonAddAdsc, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabelObservaciones)
                                .addGap(33, 33, 33)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 393, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelNombre)
                                .addGap(18, 18, 18)
                                .addComponent(jTextFieldNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelPuesto)
                                .addGap(18, 18, 18)
                                .addComponent(jComboBoxPuesto, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelServicio)
                                .addGap(18, 18, 18)
                                .addComponent(jComboBoxServicio, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelNombramiento)
                                .addGap(18, 18, 18)
                                .addComponent(jComboBoxNombramiento, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonAddNombramiento, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonAddPuesto, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonAddServicio, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelAdsc)
                    .addComponent(jComboBoxAdsc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAddAdsc, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelTarjeta)
                    .addComponent(jTextFieldTarjeta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNumEmp)
                    .addComponent(jTextFieldNumEmp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNombre)
                    .addComponent(jTextFieldNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelPlaza)
                    .addComponent(jTextFieldPlaza, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelRFC)
                    .addComponent(jTextFieldRFC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelPuesto)
                    .addComponent(jComboBoxPuesto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAddPuesto, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNombramiento)
                    .addComponent(jComboBoxNombramiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAddNombramiento, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelServicio)
                    .addComponent(jComboBoxServicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAddServicio, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelTurno)
                    .addComponent(jComboBoxTurno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAddTurno, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelEntrada)
                    .addComponent(jLabelSalida)
                    .addComponent(jSpinnerEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinnerSalida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelObservaciones)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelFechaIngreso)
                    .addComponent(jSpinnerFechaIng, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonGuardar)
                    .addComponent(jButtonCerrar))
                .addGap(30, 30, 30))
        );

        JSpinner.DateEditor hora_ent = new JSpinner.DateEditor(jSpinnerEntrada, "HH:mm");
        jSpinnerEntrada.setEditor(hora_ent);
        JSpinner.DateEditor hora_sal = new JSpinner.DateEditor(jSpinnerSalida, "HH:mm");
        jSpinnerSalida.setEditor(hora_sal);
        JSpinner.DateEditor fecha = new JSpinner.DateEditor(jSpinnerFechaIng, "yyyy-mm-dd");
        jSpinnerFechaIng.setEditor(fecha);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonGuardarMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonGuardarMouseReleased

        if(validarCampos()){            
            if(op==1){
                int conf = JOptionPane.showConfirmDialog(this, "¿Está seguro de ingresar el registo?", "Advertencia", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                if(conf == 0){            
                    if(insertarRegistro()){                    
                        JOptionPane.showMessageDialog(this, "Registro ingresado correctamente");
                        new GlobalVariables().setActualizado(true);
                        dispose();
                    }
                }
            }
            else if(op==2){
                int conf = JOptionPane.showConfirmDialog(this, "¿Está seguro de actualizar el registo?", "Advertencia", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                if(conf == 0){
                    if(actualizarRegistro(id)){                                       
                        JOptionPane.showMessageDialog(this, "Registro actualizado");
                        new GlobalVariables().setActualizado(true);
                        dispose();
                    }
                }
            }
        }
        
    }//GEN-LAST:event_jButtonGuardarMouseReleased

    private void jButtonCerrarMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonCerrarMouseReleased
        dispose();
    }//GEN-LAST:event_jButtonCerrarMouseReleased

    private void jButtonAddAdscMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonAddAdscMouseReleased
        String adsc = JOptionPane.showInputDialog(this, "Nuevo valor de Adsc","Ingresar dato", JOptionPane.PLAIN_MESSAGE).toUpperCase();
        
        if(!adsc.isEmpty() && adsc.matches("[0-9]{4}")){
            jComboBoxAdsc.addItem(adsc);
            jComboBoxAdsc.setSelectedItem(adsc);
        }
        else{
            JOptionPane.showMessageDialog(this, "Dato no válido", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonAddAdscMouseReleased

    private void jButtonAddNombramientoMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonAddNombramientoMouseReleased
        String nombramiento = JOptionPane.showInputDialog(this, "Nuevo valor de Nombramiento","Ingresar dato", JOptionPane.PLAIN_MESSAGE).toUpperCase().toUpperCase();
        
        if(!nombramiento.isEmpty() && nombramiento.matches("[a-zA-Z ]+")){
            jComboBoxNombramiento.addItem(nombramiento);
            jComboBoxNombramiento.setSelectedItem(nombramiento);
        }
        else
            JOptionPane.showMessageDialog(this, "Dato no válido", "Error", JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_jButtonAddNombramientoMouseReleased

    private void jButtonAddPuestoMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonAddPuestoMouseReleased
        String puesto = JOptionPane.showInputDialog(this, "Nuevo valor de Puesto","Ingresar dato", JOptionPane.PLAIN_MESSAGE).toUpperCase().toUpperCase();
        
        if(!puesto.isEmpty() && puesto.matches("[a-zA-Z0-9 ]+")){
            jComboBoxPuesto.addItem(puesto);
            jComboBoxPuesto.setSelectedItem(puesto);
        }
        else
            JOptionPane.showMessageDialog(this, "Dato no válido", "Error", JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_jButtonAddPuestoMouseReleased

    private void jButtonAddServicioMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonAddServicioMouseReleased
        String servicio = JOptionPane.showInputDialog(this, "Nuevo valor de Servicio","Ingresar dato", JOptionPane.PLAIN_MESSAGE).toUpperCase().toUpperCase();
        
        if(servicio != "" && servicio.matches("[a-zA-Z ]+")){
            jComboBoxServicio.addItem(servicio);
            jComboBoxServicio.setSelectedItem(servicio);
        }
        else
            JOptionPane.showMessageDialog(this, "Dato no válido", "Error", JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_jButtonAddServicioMouseReleased

    private void jButtonAddTurnoMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonAddTurnoMouseReleased
        String turno = JOptionPane.showInputDialog(this, "Nuevo valor de Turno","Ingresar dato", JOptionPane.PLAIN_MESSAGE).toUpperCase().toUpperCase();
        
        if(turno != "" && turno.matches("[a-zA-Z ]+")){
            jComboBoxTurno.addItem(turno);
            jComboBoxTurno.setSelectedItem(turno);
        }
        else
            JOptionPane.showMessageDialog(this, "Dato no válido", "Error", JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_jButtonAddTurnoMouseReleased

    private void configurarBotonGuardar(){
        if(op == 1){
            jButtonGuardar.setText("Guardar");
        }
        else if(op == 2){
            jButtonGuardar.setText("Actualizar");
        }
    }
    
    private boolean validarCampos(){
        String msg = "";
        boolean datos_ok = false;
        
        if (jComboBoxAdsc.getSelectedItem().toString().equals("")){
            jComboBoxAdsc.addItem("0");
        }
        
        if(jTextFieldNumEmp.getText().isEmpty()){
            msg = "<html>El campo <b><u>Número de Empleado</u></b> no debe quedar vacío </html>";
        }
        if(jTextFieldNombre.getText().isEmpty()){
            msg = "<html>El campo <b><u>Nombre</u></b> no debe quedar vacío </html>";
        }
        if(jTextFieldPlaza.getText().isEmpty()){
            jTextFieldPlaza.setText("0");
        }
        
        
        // SI LOS DATOS NO SON VÁLIDOS
        if(!msg.isEmpty())
            JOptionPane.showMessageDialog(this, msg, "ERROR", JOptionPane.ERROR_MESSAGE);
        else
            datos_ok = true;
            
        return datos_ok;
    }
    
    private String [] getDialogData(){

        Crypto crypto = new Crypto();        
        SimpleDateFormat hora = new SimpleDateFormat("HH:mm");
        SimpleDateFormat fecha = new SimpleDateFormat("yyyy-mm-dd");

        String [] datos = new String[14];
        datos[0] = "'" + crypto.encrypt(jComboBoxAdsc.getSelectedItem().toString()) + "', ";
        datos[1] = "'" + crypto.encrypt(jTextFieldTarjeta.getText().toUpperCase()) + "', ";
        datos[2] = "'" + crypto.encrypt(jTextFieldNumEmp.getText().toUpperCase()) + "', ";
        datos[3] = "'" + crypto.encrypt(jTextFieldNombre.getText().toUpperCase()) + "', ";
        datos[4] = "'" + crypto.encrypt(jTextFieldPlaza.getText().toUpperCase()) + "', ";
        datos[5] = "'" + crypto.encrypt(jTextFieldRFC.getText().toUpperCase()) + "', ";
        datos[6] = "'" + crypto.encrypt(jComboBoxPuesto.getSelectedItem().toString()) + "', ";
        datos[7] = "'" + crypto.encrypt(jComboBoxNombramiento.getSelectedItem().toString()) + "', ";
        datos[8] = "'" + crypto.encrypt(jComboBoxServicio.getSelectedItem().toString()) + "', ";
        datos[9] = "'" + crypto.encrypt(jComboBoxTurno.getSelectedItem().toString()) + "', ";
        datos[10] = "'" + crypto.encrypt(hora.format(jSpinnerEntrada.getValue())) + "', ";
        datos[11] = "'" + crypto.encrypt(hora.format(jSpinnerSalida.getValue())) + "', ";
        datos[12] = "'" + crypto.encrypt(jTextAreaObservaciones.getText().toString().toUpperCase()) + "', ";
        datos[13] = "'" + crypto.encrypt(fecha.format(jSpinnerFechaIng.getValue())) + "'";
        
        return datos;
    }
    
    private boolean insertarRegistro(){
        
        helper = new HelperDB();
        boolean r = false;
        
        // 1. OBTENER LOS DATOS DEL NUEVO REGISTRO Y CONCATENARLOS EN UN String
        String [] datos = getDialogData();
        
        String d = "";
        for(int i=0; i<datos.length; i++){
            d = d + datos[i];
        }
        
        // 2. DEFINIR EN UN String LA SINTAXIS DEL COMANDO SQL A ENVIAR
        String query;
        query = "INSERT INTO alfabetico (" +
                "adsc, " +
                "tarjeta, " +
                "numemp, " +
                "nombre, " +
                "plaza, " +
                "rfc, " +
                "descpuesto, " +
                "nombramiento, " +
                "servicio, " +
                "turno, " +
                "entrada, " +
                "salida, " +
                "observaciones, " +
                "fingreso) " +
                "VALUES (" + d + ")";
        
        // 3. ENVIAR EL Query Y OBTENER LA RESPUESTA DE LA BASE DE DATOS
        r = helper.updateDB(query);
        return r;
    }
    
    private boolean actualizarRegistro(String id){
        
        helper = new HelperDB();
        boolean r = false;
        
        // 1. OBTENER LOS DATOS DEL NUEVO REGISTRO Y CONCATENARLOS EN UN String
        String [] datos = getDialogData();
        
        String d = "";
        for(int i=0; i<datos.length; i++){
            d = d + datos[i];
        }
        
        // 2. DEFINIR EN UN String LA SINTAXIS DEL COMANDO SQL A ENVIAR
        String query;
        query = "UPDATE alfabetico SET " +
             "adsc="+datos[0] +
             "tarjeta="+datos[1] +
             "numemp="+datos[2] +
             "nombre="+datos[3] +
             "plaza="+datos[4] +
             "rfc="+datos[5] +
             "descpuesto="+datos[6] +
             "nombramiento="+datos[7] +
             "servicio="+datos[8] +
             "turno="+datos[9] +
             "entrada="+datos[10] +
             "salida="+datos[11] +
             "observaciones="+datos[12] +
             "fingreso="+datos[13] +
             "WHERE Id='" + id + "'";
        
        // 3. ENVIAR EL Query Y OBTENER LA RESPUESTA DE LA BASE DE DATOS
        r = helper.updateDB(query);
        return r;
    }
    
    // OBTENER DATOS PARA ACTUALIZAR
    public void cargarDatosActualizarOriginal(String id){
        
        helper = new HelperDB();
        this.id = id;
        
        ArrayList <String> data = new ArrayList();
        String query = "SELECT * FROM alfabetico WHERE id = "+id;
        data = helper.getData(query);
        
        String ent = data.get(11);
        String sal = data.get(12);
        String fec = data.get(14);
        
        Date entrada = null;
        Date salida = null;
        Date fecha = null;
        try {
            if(!ent.isEmpty())
                entrada = new SimpleDateFormat("HH:mm").parse(ent);
            else
                entrada = new SimpleDateFormat("HH:mm").parse("00:00");
            
            if(!sal.isEmpty())
                salida = new SimpleDateFormat("HH:mm").parse(sal);
            else
                salida = new SimpleDateFormat("HH:mm").parse("00:00");
            
            if(!fec.isEmpty())
                fecha = new SimpleDateFormat("yyyy-mm-dd").parse(fec);
            else
                fecha = new SimpleDateFormat("yyyy-mm-dd").parse("1900-01-01");
                
        } catch (ParseException ex) {
            Logger.getLogger(Alfabetico.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        jComboBoxAdsc.setSelectedItem(data.get(1));
        jTextFieldTarjeta.setText(data.get(2));
        jTextFieldNumEmp.setText(data.get(3));
        jTextFieldNombre.setText(data.get(4));
        jTextFieldPlaza.setText(data.get(5));
        jTextFieldRFC.setText(data.get(6));
        jComboBoxPuesto.setSelectedItem(data.get(7));
        jComboBoxNombramiento.setSelectedItem(data.get(8));
        jComboBoxServicio.setSelectedItem(data.get(9));
        jComboBoxTurno.setSelectedItem(data.get(10));
        jSpinnerEntrada.setValue(entrada);
        jSpinnerSalida.getModel().setValue(salida);
        jTextAreaObservaciones.setText(data.get(13));
        jSpinnerFechaIng.getModel().setValue(fecha);
    }
    
    // OBTENER DATOS PARA ACTUALIZAR
    public void cargarDatosActualizar(String[] datos){
        
        this.id = datos[0];
        String ent = datos[11];
        String sal = datos[12];
        String fec = datos[14];
        
        Date entrada = null;
        Date salida = null;
        Date fecha = null;
        try {
            if(!ent.isEmpty())
                entrada = new SimpleDateFormat("HH:mm").parse(ent);
            else
                entrada = new SimpleDateFormat("HH:mm").parse("00:00");
            
            if(!sal.isEmpty())
                salida = new SimpleDateFormat("HH:mm").parse(sal);
            else
                salida = new SimpleDateFormat("HH:mm").parse("00:00");
            
            if(!fec.isEmpty())
                fecha = new SimpleDateFormat("yyyy-mm-dd").parse(fec);
            else
                fecha = new SimpleDateFormat("yyyy-mm-dd").parse("1900-01-01");
                
        } catch (ParseException ex) {
            Logger.getLogger(Alfabetico.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        jComboBoxAdsc.setSelectedItem(datos[1]);
        jTextFieldTarjeta.setText(datos[2]);
        jTextFieldNumEmp.setText(datos[3]);
        jTextFieldNombre.setText(datos[4]);
        jTextFieldPlaza.setText(datos[5]);
        jTextFieldRFC.setText(datos[6]);
        jComboBoxPuesto.setSelectedItem(datos[7]);
        jComboBoxNombramiento.setSelectedItem(datos[8]);
        jComboBoxServicio.setSelectedItem(datos[9]);
        jComboBoxTurno.setSelectedItem(datos[10]);
        jSpinnerEntrada.setValue(entrada);
        jSpinnerSalida.getModel().setValue(salida);
        jTextAreaObservaciones.setText(datos[13]);
        jSpinnerFechaIng.getModel().setValue(fecha);
    }
    
    private void cargarCombos(){
        
        helper = new HelperDB();
        DefaultTableModel model = new DefaultTableModel();       
        String query = "SELECT * FROM alfabetico";
        model = helper.getTableModel(query, "alfabetico");
        
        ArrayList<String> adsc = new ArrayList();
        ArrayList<String> desc_puesto = new ArrayList();
        ArrayList<String> nombramiento = new ArrayList();
        ArrayList<String> servicio = new ArrayList();
        ArrayList<String> turno = new ArrayList();
        String a, d, n, s, t;
        
        for(int i=0; i<model.getRowCount(); i++){
            a = model.getValueAt(i, 1).toString();
            d = model.getValueAt(i, 7).toString();
            n = model.getValueAt(i, 8).toString();
            s = model.getValueAt(i, 9).toString();
            t = model.getValueAt(i, 10).toString();
            
            if(!adsc.contains(a) && !a.isEmpty())
                    adsc.add(a);
            
            if(!desc_puesto.contains(d) && !d.isEmpty())
                    desc_puesto.add(d);    
            
            if(!nombramiento.contains(n) && !n.isEmpty())
                    nombramiento.add(n);    
            
            if(!servicio.contains(s) && !s.isEmpty())
                    servicio.add(s);    
            
            if(!turno.contains(t) && !t.isEmpty())
                    turno.add(t);                
        }
        
        adsc.sort(null);
        desc_puesto.sort(null);
        nombramiento.sort(null);
        servicio.sort(null);
        turno.sort(null);
        
        for(int i=0; i<adsc.size(); i++)
            jComboBoxAdsc.addItem(adsc.get(i));
                            
        for(int i=0; i<desc_puesto.size(); i++)
            jComboBoxPuesto.addItem(desc_puesto.get(i));
        
        for(int i=0; i<nombramiento.size(); i++)
            jComboBoxNombramiento.addItem(nombramiento.get(i));
        
        for(int i=0; i<servicio.size(); i++)
            jComboBoxServicio.addItem(servicio.get(i));
        
        for(int i=0; i<turno.size(); i++)
            jComboBoxTurno.addItem(turno.get(i));
    }
    
    public void limpiarDialogDatosAlfabetico(){
        Date entrada = null;
        Date salida = null;
        Date fecha = null;
        
         try {
            entrada = new SimpleDateFormat("HH:mm").parse("00:00");
            salida = new SimpleDateFormat("HH:mm").parse("00:00");
            fecha = new SimpleDateFormat("yyyy-mm-dd").parse("1900-01-01");
        } catch (ParseException ex) {
            Logger.getLogger(Alfabetico.class.getName()).log(Level.SEVERE, null, ex);
        }
         
        jComboBoxAdsc.setSelectedIndex(0);
        jTextFieldTarjeta.setText("");
        jTextFieldNumEmp.setText("");
        jTextFieldNombre.setText("");
        jTextFieldPlaza.setText("");
        jTextFieldRFC.setText("");
        jComboBoxPuesto.setSelectedIndex(0);
        jComboBoxNombramiento.setSelectedIndex(0);
        jComboBoxServicio.setSelectedIndex(0);
        jComboBoxTurno.setSelectedIndex(0);
        jSpinnerEntrada.setValue(entrada);
        jSpinnerSalida.getModel().setValue(salida);
        jTextAreaObservaciones.setText("");
        jSpinnerFechaIng.getModel().setValue(fecha);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ActualizarAlfabetico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ActualizarAlfabetico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ActualizarAlfabetico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ActualizarAlfabetico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ActualizarAlfabetico dialog = new ActualizarAlfabetico(new javax.swing.JFrame(), true, 1);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAddAdsc;
    private javax.swing.JButton jButtonAddNombramiento;
    private javax.swing.JButton jButtonAddPuesto;
    private javax.swing.JButton jButtonAddServicio;
    private javax.swing.JButton jButtonAddTurno;
    private javax.swing.JButton jButtonCerrar;
    private javax.swing.JButton jButtonGuardar;
    private javax.swing.JComboBox jComboBoxAdsc;
    private javax.swing.JComboBox jComboBoxNombramiento;
    private javax.swing.JComboBox jComboBoxPuesto;
    private javax.swing.JComboBox jComboBoxServicio;
    private javax.swing.JComboBox jComboBoxTurno;
    private javax.swing.JLabel jLabelAdsc;
    private javax.swing.JLabel jLabelEntrada;
    private javax.swing.JLabel jLabelFechaIngreso;
    private javax.swing.JLabel jLabelNombramiento;
    private javax.swing.JLabel jLabelNombre;
    private javax.swing.JLabel jLabelNumEmp;
    private javax.swing.JLabel jLabelObservaciones;
    private javax.swing.JLabel jLabelPlaza;
    private javax.swing.JLabel jLabelPuesto;
    private javax.swing.JLabel jLabelRFC;
    private javax.swing.JLabel jLabelSalida;
    private javax.swing.JLabel jLabelServicio;
    private javax.swing.JLabel jLabelTarjeta;
    private javax.swing.JLabel jLabelTurno;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner jSpinnerEntrada;
    private javax.swing.JSpinner jSpinnerFechaIng;
    private javax.swing.JSpinner jSpinnerSalida;
    private javax.swing.JTextArea jTextAreaObservaciones;
    private javax.swing.JTextField jTextFieldNombre;
    private javax.swing.JTextField jTextFieldNumEmp;
    private javax.swing.JTextField jTextFieldPlaza;
    private javax.swing.JTextField jTextFieldRFC;
    private javax.swing.JTextField jTextFieldTarjeta;
    // End of variables declaration//GEN-END:variables
}
